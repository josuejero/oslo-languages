// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Blog System
model Post {
  id         String     @id @default(cuid())
  title      String
  slug       String     @unique
  content    String     @db.Text
  excerpt    String?
  author     String     // Just store the author name
  published  Boolean    @default(false)
  coverImage String?    // URL to the image
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  tags       Tag[]
  comments   Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  author    String   // Name of commenter
  email     String   // Email of commenter
  approved  Boolean  @default(false)
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

// Form Submissions
model FormSubmission {
  id        String           @id @default(cuid())
  type      SubmissionType
  status    SubmissionStatus @default(PENDING)
  data      Json            // Store all form fields as JSON
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum SubmissionType {
  CONTACT
  REGISTRATION
  INQUIRY
}

enum SubmissionStatus {
  PENDING
  PROCESSED
  ARCHIVED
}

// Media Library
model Media {
  id          String   @id @default(cuid())
  filename    String
  path        String   @unique
  mimeType    String
  size        Int      // in bytes
  width       Int?     // for images
  height      Int?     // for images
  alt         String?  // alt text for images
  title       String?  // display title
  isPublic    Boolean  @default(true)
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt
}